* >Natural Source Header 000000
* :Mode S
* :CP
* :LineIncrement 10
* <Natural Source Header
*
* Program for function: Display Yacht
*
DEFINE DATA
GLOBAL USING ST----G0         /* Global Data Area
LOCAL  USING LAYOUT-L         /* User variables across functions
LOCAL  USING YA---VL0         /* Local data view for DB access
LOCAL  USING YA---ML0         /* Local user variables
LOCAL  USING YA----A0         /* PDA used as LDA
END-DEFINE
*                             /* Initialize function keys
INCLUDE DFPF--C0
*                             /* Initialize map variables
#PROG   := *PROGRAM
#TITLE  := '    Display Yacht'
*                             /* Control variables for key status
#KEY-C := (AD=I)
#DATA-C := (AD=P)
*
REP.
REPEAT
*                                                /* Map output
  INPUT WITH TEXT #G-MESSAGE-TEXT, #G-OPERAND1
  USING MAP 'MAYA--M1'
  RESET #G-MESSAGE #RESPONSE-CODE
*                                                /* Distinction of cases
  DECIDE FOR FIRST CONDITION
    WHEN *PF-KEY = 'ENTR' AND #DATA              /* continue
      IGNORE
    WHEN *PF-KEY = 'ENTR' AND NOT #DATA          /* Key status
      PERFORM KEY-CHECK                          /* Database access
    WHEN *PF-KEY = 'PF3' AND #DATA
      #G-MESSAGE-TEXT := 'Yacht :1: was displayed'
      #G-OPERAND1     := YACHT-M.YACHT-ID
      ESCAPE BOTTOM (REP.)
    WHEN *PF-KEY = 'PF12'                        /* Function cancelled
      #G-MESSAGE-TEXT := 'Yacht :1: display was cancelled'
      #G-OPERAND1     := YACHT-M.YACHT-ID
      ESCAPE BOTTOM (REP.)
    WHEN NONE
      #G-MESSAGE-TEXT := 'Please select a valid function!'
  END-DECIDE
END-REPEAT
*
FETCH 'MEYA--P0'                                 /* Return to submenu
*
* Inline Subroutines
*
DEFINE SUBROUTINE KEY-CHECK
IF #KEY-C NOT MODIFIED
  #G-MESSAGE-TEXT  := 'Please enter Yacht-ID!'
ELSE                                           /* Database access
*                                                /* Check yacht-ID
*                                                /* for (non-)existence
  /* FIND YACHT-V WITH YACHT-ID = YACHT-M.YACHT-ID
  /*     IF NO RECORDS FOUND
  /*      #RESPONSE-CODE := 1
  /*      ESCAPE BOTTOM
  /*   END-NOREC
  /*   MOVE BY NAME YACHT-V TO YACHT-M
  /* END-FIND

  /*
  CALLNAT 'REYA--N0' YACHT-M.YACHT-ID #RESPONSE-CODE YACHT-P
  /*
* ...
  IF #RESPONSE-CODE = 0                    /* Yacht exists
    #DATA           := TRUE                /* Apply map status
    #KEY-C          := (AD=PI)             /* Apply control variables
    #DATA-C         := (AD=PI)             /* P for display/delete yacht
    MOVE BY NAME YACHT-P TO YACHT-M
  ELSE                                     /* Yacht does not exist
    #G-MESSAGE-TEXT := 'Yacht :1: does not exist!'
    #G-OPERAND1     := YACHT-M.YACHT-ID
    RESET YACHT-M
  END-IF
END-IF
END-SUBROUTINE
*
END

